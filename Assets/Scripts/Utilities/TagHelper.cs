using UnityEngine;
#if UNITY_EDITOR
using UnityEditor;
#endif

public static class TagHelper
{
    public const string PLAYER_SPAWN_TAG = "PlayerSpawn";

    /// <summary>
    /// Ki·ªÉm tra v√† t·∫°o tag n·∫øu ch∆∞a t·ªìn t·∫°i (ch·ªâ ho·∫°t ƒë·ªông trong Editor)
    /// </summary>
    /// <param name="tagName">T√™n tag c·∫ßn t·∫°o</param>
    /// <returns>True n·∫øu tag t·ªìn t·∫°i ho·∫∑c ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng</returns>
    public static bool EnsureTagExists(string tagName)
    {
#if UNITY_EDITOR
        // Ki·ªÉm tra tag ƒë√£ t·ªìn t·∫°i ch∆∞a
        if (IsTagDefined(tagName))
        {
            Debug.Log($"‚úÖ Tag '{tagName}' already exists");
            return true;
        }

        // T·∫°o tag m·ªõi
        try
        {
            SerializedObject tagManager = new SerializedObject(AssetDatabase.LoadAllAssetsAtPath("ProjectSettings/TagManager.asset")[0]);
            SerializedProperty tagsProp = tagManager.FindProperty("tags");

            // Th√™m tag m·ªõi
            tagsProp.InsertArrayElementAtIndex(0);
            SerializedProperty newTagProp = tagsProp.GetArrayElementAtIndex(0);
            newTagProp.stringValue = tagName;

            // L∆∞u thay ƒë·ªïi
            tagManager.ApplyModifiedProperties();

            Debug.Log($"‚úÖ Successfully created tag: '{tagName}'");
            return true;
        }
        catch (System.Exception e)
        {
            Debug.LogError($"‚ùå Failed to create tag '{tagName}': {e.Message}");
            Debug.LogError("üí° Please manually add the tag: Edit ‚Üí Project Settings ‚Üí Tags and Layers ‚Üí Tags");
            return false;
        }
#else
        // Runtime - ch·ªâ ki·ªÉm tra
        return IsTagDefined(tagName);
#endif
    }

    /// <summary>
    /// Ki·ªÉm tra tag c√≥ t·ªìn t·∫°i kh√¥ng
    /// </summary>
    /// <param name="tagName">T√™n tag</param>
    /// <returns>True n·∫øu tag t·ªìn t·∫°i</returns>
    public static bool IsTagDefined(string tagName)
    {
        try
        {
            GameObject.FindGameObjectWithTag(tagName);
            return true;
        }
        catch (UnityException)
        {
            return false;
        }
    }

    /// <summary>
    /// T·∫°o GameObject v·ªõi PlayerSpawn tag t·∫°i v·ªã tr√≠ hi·ªán t·∫°i
    /// </summary>
    /// <param name="position">V·ªã tr√≠ spawn point</param>
    /// <returns>GameObject ƒë∆∞·ª£c t·∫°o</returns>
    public static GameObject CreatePlayerSpawnPoint(Vector3 position = default)
    {
        // ƒê·∫£m b·∫£o tag t·ªìn t·∫°i
        EnsureTagExists(PLAYER_SPAWN_TAG);

        // T·∫°o GameObject
        GameObject spawnPoint = new GameObject("PlayerSpawn");
        spawnPoint.transform.position = position;

        // G√°n tag n·∫øu c√≥ th·ªÉ
        if (IsTagDefined(PLAYER_SPAWN_TAG))
        {
            spawnPoint.tag = PLAYER_SPAWN_TAG;
            Debug.Log($"‚úÖ Created PlayerSpawn GameObject at {position}");
        }
        else
        {
            Debug.LogWarning($"‚ö†Ô∏è Created GameObject but couldn't assign tag '{PLAYER_SPAWN_TAG}'");
        }

        return spawnPoint;
    }

#if UNITY_EDITOR
    /// <summary>
    /// Menu item ƒë·ªÉ t·∫°o PlayerSpawn tag
    /// </summary>
    [MenuItem("RPG Tools/Create PlayerSpawn Tag")]
    public static void CreatePlayerSpawnTag()
    {
        if (EnsureTagExists(PLAYER_SPAWN_TAG))
        {
            EditorUtility.DisplayDialog("Success", $"Tag '{PLAYER_SPAWN_TAG}' is now available!", "OK");
        }
    }

    /// <summary>
    /// Menu item ƒë·ªÉ t·∫°o PlayerSpawn GameObject
    /// </summary>
    [MenuItem("RPG Tools/Create PlayerSpawn GameObject")]
    public static void CreatePlayerSpawnGameObject()
    {
        // T·∫°o tag tr∆∞·ªõc
        EnsureTagExists(PLAYER_SPAWN_TAG);

        // T·∫°o GameObject t·∫°i center c·ªßa Scene view
        Vector3 spawnPosition = Vector3.zero;
        if (SceneView.lastActiveSceneView != null)
        {
            spawnPosition = SceneView.lastActiveSceneView.camera.transform.position;
            spawnPosition.z = 0; // Top-down game
        }

        GameObject spawnPoint = CreatePlayerSpawnPoint(spawnPosition);

        // Focus v√†o object v·ª´a t·∫°o
        Selection.activeGameObject = spawnPoint;
        EditorGUIUtility.PingObject(spawnPoint);
    }
#endif
}
